services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: odoo123
      POSTGRES_DB: odoo
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - odoo-db-data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U odoo"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - odoo_network

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    image: odoo:18.0
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9018:8069"
      - "8072:8072"
    volumes:
      - odoo-web-data:/var/lib/odoo
      - ./config:/etc/odoo
      - ./addons:/mnt/extra-addons
      - ./moxogo18:/mnt/extra-addons/moxogo18
      - ./logs:/var/log/odoo
      - ./backups:/mnt/backups
      - odoo-sessions:/mnt/.local
    environment:
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: odoo123
      POSTGRES_DB: odoo
      ADMIN_PASSWORD: admin
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: odoo
      DB_PASSWORD: odoo123
    command: >
      bash -c '
        echo "Waiting for PostgreSQL..."
        while ! nc -z db 5432; do
          sleep 1
        done
        echo "PostgreSQL started"
        
        echo "Checking database initialization..."
        python3 << "EOF"
import psycopg2
import time

def wait_for_db():
    while True:
        try:
            conn = psycopg2.connect(
                dbname="odoo",
                user="odoo",
                password="odoo123",
                host="db"
            )
            conn.close()
            return
        except psycopg2.OperationalError:
            print("Waiting for database to be ready...")
            time.sleep(1)

wait_for_db()
EOF
        
        echo "Initializing Odoo database..."
        odoo --config=/etc/odoo/odoo.conf --init base --load-language en_US --stop-after-init || true
        
        echo "Starting Odoo server..."
        exec odoo --config=/etc/odoo/odoo.conf
      '
    user: odoo
    restart: unless-stopped
    networks:
      - odoo_network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - ENABLE_SSL=${ENABLE_SSL:-false}
      - SERVER_NAME=${SERVER_NAME:-localhost}
      - ODOO_HOST=${ODOO_HOST:-web}
      - ODOO_PORT=${ODOO_PORT:-8069}
      - ODOO_CHAT_PORT=${ODOO_CHAT_PORT:-8072}
      - NGINX_PORT=${NGINX_PORT:-80}
      - NGINX_SSL_PORT=${NGINX_SSL_PORT:-443}
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:rw
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certs:/etc/nginx/certs
      - ./nginx/letsencrypt:/var/www/html:rw
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    command: >
      /bin/sh -c "envsubst '$$DOMAIN $$SERVER_NAME $$ODOO_HOST $$ODOO_PORT $$ODOO_CHAT_PORT $$NGINX_PORT $$NGINX_SSL_PORT' 
      < /etc/nginx/conf.d/odoo.conf.template > /etc/nginx/conf.d/odoo.conf &&
      envsubst '$$DOMAIN $$SERVER_NAME' 
      < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf &&
      apt-get update && apt-get install -y nano &&
      nginx -g 'daemon off;'"
    networks:
      - odoo_network
    depends_on:
      - web

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./nginx/ssl:/etc/letsencrypt:rw
      - ./nginx/letsencrypt:/var/www/html:rw
    depends_on:
      - nginx

volumes:
  odoo-web-data:
  odoo-db-data:
  nginx_conf:
  odoo-sessions:

networks:
  odoo_network:
    driver: bridge
