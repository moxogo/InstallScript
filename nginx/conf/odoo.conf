upstream odoo {
    server web:8069;
    keepalive 32;  # Keep connections alive
}

upstream odoochat {
    server web:8072;
    keepalive 32;
}

# Cache configuration
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=odoo_cache:10m max_size=10g inactive=60m use_temp_path=off;

server {
    listen 80;
    server_name _;  # Accept any hostname
    
    # Timeouts
    proxy_read_timeout 720s;
    proxy_connect_timeout 720s;
    proxy_send_timeout 720s;
    keepalive_timeout 120s;   # Increased keepalive timeout
    
    # Buffer settings
    proxy_buffers 16 64k;
    proxy_buffer_size 128k;

    # Proxy headers
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;

    # Log files
    access_log /var/log/nginx/odoo.access.log combined buffer=256k flush=1m;
    error_log /var/log/nginx/odoo.error.log;

    # Optimize for mobile and desktop
    add_header Vary "User-Agent";
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    # Handle / requests
    location / {
        proxy_redirect off;
        proxy_pass http://odoo;
        proxy_set_header Host $host;
        proxy_set_header Connection "";  # for keepalive
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Handle /longpolling requests
    location /longpolling {
        proxy_pass http://odoochat;
        proxy_set_header Host $host;
        proxy_set_header Connection "";
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Cache static files
    location ~* /web/static/ {
        proxy_cache odoo_cache;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_valid 200 304 60m;
        proxy_cache_valid 404 1m;
        proxy_buffering on;
        proxy_cache_lock on;
        proxy_cache_key $host$request_uri;
        proxy_pass http://odoo;
        expires 1d;
        
        # Cache control
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, no-transform";
    }

    # Deny access to database manager in production
    location /web/database {
        return 404;
    }

    # Gzip compression
    gzip on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level 6;
    gzip_vary on;
}

# HTTPS Configuration (commented out for later use)
# server {
#     listen 80;
#     server_name your-domain.com;
#     
#     # Redirect all HTTP requests to HTTPS
#     location / {
#         return 301 https://$server_name$request_uri;
#     }
#     
#     # Let's Encrypt verification
#     location /.well-known/acme-challenge/ {
#         root /var/www/html;
#     }
# }
# 
# server {
#     listen 443 ssl;
#     server_name your-domain.com;
# 
#     # SSL configuration
#     ssl_certificate /etc/nginx/ssl/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/nginx/ssl/live/your-domain.com/privkey.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;
# 
#     # modern configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
# 
#     # HSTS (uncomment if you're sure)
#     # add_header Strict-Transport-Security "max-age=63072000" always;
# 
#     # Proxy headers and locations configuration would go here
#     # Copy from the HTTP server block when needed
# }
